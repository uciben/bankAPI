package com.revature.delegates;

import java.io.IOException;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.revature.data.AccountPostGres;
import com.revature.data.RolePostGres;
import com.revature.data.UserPostGres;
import com.revature.humans.Account;
import com.revature.humans.User;
import com.revature.services.UserService;
import com.revature.data.AccountStatusPostGres;
import com.revature.services.AccountService;
import com.revature.data.AccountTypePostGres;
/*
 *  ENDPOINTS
 *  / GET ONLY ADMIN OR EMPLOYEE
 *  / POST ONLY ADMIN OR EMPLOYEE -> creates account , return status code 201 and new acc
 *  / PUT Admin -> update account, return account
 *  /:id GET ONLY ADMIN OR EMPLOYEE -> return account
 *  /status/:statusId GET ADMIN OR EMPLOYEE -> return accounts which have statusID
 *  /owner/:userId Get ADMIN OR EMPLOYEE or current user = id -> return accounts owned by owner
 *  /withdraw POST Admin or current user owns -> message
 *  /deposit POST Admin or current user owns -> message
 *  /transfer Post Admin or current user owns source acc ->message
 *  
 *  
 */
public class AccountDelegate implements FrontControllerDelegate{
	private UserService uServ = new UserService(new UserPostGres(), new RolePostGres(), new AccountPostGres());
	private AccountService accServ = new AccountService(new AccountPostGres(), new AccountStatusPostGres(),
			new AccountTypePostGres(), new UserPostGres());
	
	private ObjectMapper om = new ObjectMapper();
	
	@Override
	public void process(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		String path = (String) req.getAttribute("path");
		
		if(path == null || path.equals("")) {
			switch(req.getMethod()) {
				case "GET":
					break;
				case "POST":
					break;
				case "PUT":
					break;
				default:
					resp.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED);
					break;
			}
		}
		else if(path.contains("status")) {
			getAccountbyStatusId(req, resp, 1);
		}
		else if(path.contains("owner")) {
			
		}
		else if(path.contains("withdraw")) {
			
		}
		else if(path.contains("deposit")) {
			
		}
		else if(path.contains("transfer")) {
			
		}
		// :id
		else {
			getAccountbyId(req, resp, Integer.valueOf(path));
		}
	}
	private void getAccountbyStatusId(HttpServletRequest req, HttpServletResponse resp, Integer statusid) 
			throws IOException{
		
	}
	
	private void getAccountbyId(HttpServletRequest req, HttpServletResponse resp, Integer accountId)
			throws IOException {
		
		User currentUser = (User) req.getSession().getAttribute("user");
		Account foundAccount = accServ.getAccountbyID(accountId);
		
		
		if(isAdminOrEmployee(currentUser)) {
			if(req.getMethod().equals("GET")) {
				if(foundAccount != null) {
					resp.getWriter().write(om.writeValueAsString(foundAccount));
				}
				else {
					resp.sendError(HttpServletResponse.SC_NOT_FOUND);
				}
			}
			else{
				resp.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED);
			}
		}
		else {
			resp.sendError(401, "The request action is not permitted");
		}
	}
	
	private boolean isAdminOrEmployee(User currentUser) {
		return (isAdmin(currentUser) || currentUser.getRole().getRole().equals("Employee"));
	}
	
	private boolean isAdmin(User currentUser) {
		return currentUser.getRole().getRole().equals("Admin");
	}

}
