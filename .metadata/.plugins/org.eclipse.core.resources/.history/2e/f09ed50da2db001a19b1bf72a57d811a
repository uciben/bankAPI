package com.revature.data;

import java.util.Set;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.HashSet;

import com.revature.humans.Account;
import com.revature.humans.Role;
import com.revature.humans.User;
import com.revature.utils.ConnectionUtil;
// TODO NOT DONE
public class UserPostGres implements UserDAO {
	private ConnectionUtil cu = ConnectionUtil.getConnectionUtil();
	private AccountDAO accountDAO = new AccountPostGres();


	public Integer createUser(User u) {
		Integer id = 0;
		
		try (Connection conn = cu.getConnection()){
			conn.setAutoCommit(false);
			String sql = "insert into person values (default, ? , ? , ? , ? , ? , ?)";
			String[] keys = {"person_id"};
			PreparedStatement pstmt = conn.prepareStatement(sql, keys);
			pstmt.setString(1, u.getUserName());
			pstmt.setString(2, u.getPassword());
			pstmt.setString(3, u.getFirstName());
			pstmt.setString(4, u.getLastName());
			pstmt.setString(5, u.getEmail());
			pstmt.setInt(6, u.getRole().getRoleId());
			
			pstmt.executeUpdate();
			ResultSet rs = pstmt.getGeneratedKeys();
			
			if (rs.next()) {
				id = rs.getInt(1);
				conn.commit();
			}
			else {
				conn.rollback();
			}
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		
		return id;
	}

	@Override
	public User getUserbyID(int id) {
		// TODO Auto-generated method stub
		User person = null;
		try (Connection conn = cu.getConnection()){
			String sql = "select * from person join user_role on person.role_id " +
					"= user_role.role_id where person_id = ?";
			PreparedStatement pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, id);
			
			ResultSet rs = pstmt.executeQuery();
			
			if(rs.next()) {
				person = new User(rs.getInt("person_id"), rs.getString("username"), 
						rs.getString("passwd"), rs.getString("firstname"),
						rs.getString("lastname"), rs.getString("email"), 
						new Role(rs.getInt("role_id"), rs.getString("role_name")));
				
				
				
				
				String sql2 = "select * from person_account join account on "
						+ "person_account.account_id = account.account_id where person_id = ?";
				PreparedStatement pstmt2 = conn.prepareStatement(sql);
				pstmt2.setInt(1, id);

				ResultSet rs2 = pstmt.executeQuery();
				
				Set<Account> setOfAccs = new HashSet<>();
				while (rs2.next()) {
					Account accUserOwns = accountDAO.getAccountbyID(rs.getInt("account_id"));
					setOfAccs.add(accUserOwns);
				}
				person.setAccounts(setOfAccs);

			}
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		return person;
	}

	@Override
	public User getUserbyEmail(String email) {
		User person = null;
		try (Connection conn = cu.getConnection()){
			String sql = "select * from person join user_role on person.role_id " +
					"= user_role.role_id where email = ?";
			PreparedStatement pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, email);
			
			ResultSet rs = pstmt.executeQuery();
			
			if(rs.next()) {
				person = new User(rs.getInt("person_id"), rs.getString("username"), 
						rs.getString("passwd"), rs.getString("firstname"),
						rs.getString("lastname"), rs.getString("email"), 
						new Role(rs.getInt("role_id"), rs.getString("role_name")));
			}
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		return person;
	}

	@Override
	public User getUserbyName(String name) {
		// TODO Auto-generated method stub
		User person = null;
		try (Connection conn = cu.getConnection()){
			String sql = "select * from person join user_role on person.role_id " +
					"= user_role.role_id where username = ?";
			PreparedStatement pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, name);
			
			ResultSet rs = pstmt.executeQuery();
			
			if(rs.next()) {
				person = new User(rs.getInt("person_id"), rs.getString("username"), 
						rs.getString("passwd"), rs.getString("firstname"),
						rs.getString("lastname"), rs.getString("email"), 
						new Role(rs.getInt("role_id"), rs.getString("role_name")));
			}
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		return person;
	}

	@Override
	public User getUserbyUsernameAndPassword(String username, String password) {
		User person = null;
		try (Connection conn = cu.getConnection()){
			String sql = "select * from person join user_role on person.role_id " +
					"= user_role.role_id where username = ? AND password = ?";
			PreparedStatement pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, username);
			pstmt.setString(2, password);
			ResultSet rs = pstmt.executeQuery();
			
			if(rs.next()) {
				person = new User(rs.getInt("person_id"), rs.getString("username"), 
						rs.getString("passwd"), rs.getString("firstname"),
						rs.getString("lastname"), rs.getString("email"), 
						new Role(rs.getInt("role_id"), rs.getString("role_name")));
			}
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		return person;
	}

	@Override
	public Set<User> getUserbyRole(Role r) {
		Set<User> people = null;
		try (Connection conn = cu.getConnection()){
			String sql = "select * from person join user_role on person.role_id " +
					"= user_role.role_id where person.role_id = ?";
			PreparedStatement pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, r.getRoleId());
			
			ResultSet rs = pstmt.executeQuery();
			
			people = new HashSet<>();
			
			if(rs.next()) {
				people.add(new User(rs.getInt("person_id"), rs.getString("username"), 
						rs.getString("passwd"), rs.getString("firstname"),
						rs.getString("lastname"), rs.getString("email"), 
						new Role(rs.getInt("role_id"), rs.getString("role_name"))));
			}
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		return people;
		
	}

	@Override
	public void updateUser(User u) {
		try(Connection conn = cu.getConnection()){
			conn.setAutoCommit(false);
			String sql = "update person set username = ? , passwd = ? , " +
					"firstname = ? , lastname = ?, email = ? , role_id = ?" +
					" where person_id = ?";
			PreparedStatement pstmt = conn.prepareStatement(sql);
			pstmt.setString(1,u.getUserName());
			pstmt.setString(2,u.getPassword());
			pstmt.setString(3,u.getFirstName());
			pstmt.setString(4,u.getLastName());
			pstmt.setString(5,u.getEmail());
			pstmt.setInt(6, u.getRole().getRoleId());
			pstmt.setInt(7, u.getId());
			
			int rowsAffected = pstmt.executeUpdate();
			if (rowsAffected > 0) {
				if(rowsAffected >0 ) {
					conn.commit();
				}
				else {
					conn.rollback();
				}
			}
			else {
				conn.rollback();
			}
			
		}
		catch(Exception e) {
			e.printStackTrace();
		}
	}

	@Override
	public void deleteUser(User u) {
		//TODO
		try (Connection conn = cu.getConnection()){
			conn.setAutoCommit(false);
			
			
			String sql = "delete from person where person_id = ?";
			PreparedStatement pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, u.getId());
			
			int rowsAffected = pstmt.executeUpdate();
			
			if(rowsAffected > 0) {
				for (Account a: u.getAccounts()) {
					accountDAO.deleteAccount(a);
				}

				
				conn.commit();
			}
			else {
				conn.rollback();
			}
		}
		catch(Exception e) {
			e.printStackTrace();
		}

	}

}
